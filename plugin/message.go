package plugin

import (
	"fmt"
	"github.com/iancoleman/strcase"
	"google.golang.org/protobuf/compiler/protogen"
)

func HandleProtoMessage(gen *protogen.Plugin, file *protogen.File, message *protogen.Message) error {
	if shouldHandleMessage(message) {
		g := createFile(gen, file, message)
		writeFileHeader(g, file, message)
		writeImports(g, message)
		writeStruct(g, message)
		writeFields(g, message)
		writeEdges(g, message)
	}

	return nil
}

func shouldHandleMessage(message *protogen.Message) bool {
	messageOptions := getMessageOptions(message)
	return messageOptions.Gen
}

func createFile(gen *protogen.Plugin, file *protogen.File, message *protogen.Message) *protogen.GeneratedFile {
	fileName := getMessageFileName(file, message)
	importPath := getMessageFileImportPath(file)
	g := gen.NewGeneratedFile(fileName, importPath)
	return g
}

func getMessageFileName(file *protogen.File, message *protogen.Message) string {
	messageName := getMessageGoName(message)
	return fmt.Sprintf("%s_%s_ent.pb.go", file.GeneratedFilenamePrefix, strcase.ToSnake(messageName))
}

func getMessageFileImportPath(file *protogen.File) protogen.GoImportPath {
	return file.GoImportPath
}

func getMessageGoName(message *protogen.Message) string {
	return message.GoIdent.GoName
}

func writeFileHeader(g *protogen.GeneratedFile, file *protogen.File, message *protogen.Message) {
	packageName := getMessageFilePackageName(file)
	g.P("// Code generated by protoc-gen-go-ent. DO NOT EDIT.")
	g.P()
	g.P("package ", packageName)
	g.P()
}

func getMessageFilePackageName(file *protogen.File) string {
	return string(file.GoPackageName)
}

func writeImports(g *protogen.GeneratedFile, message *protogen.Message) {
	g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "entgo.io/ent"})
	if len(message.Fields) > 0 {
		g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "entgo.io/ent/schema/field"})
	}
	messageOptions := getMessageOptions(message)
	for _, additonalImport := range messageOptions.AdditionalImports {
		g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: protogen.GoImportPath(additonalImport)})
	}
}

func writeStruct(g *protogen.GeneratedFile, message *protogen.Message) {
	structName := getMessageStructName(message)
	g.P(fmt.Sprintf("type %s struct {", structName))
	g.P("  ent.Schema")
	g.P("}")
}

func getMessageStructName(message *protogen.Message) string {
	return getMessageGoName(message)
}
